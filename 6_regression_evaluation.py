# -*- coding: utf-8 -*-
"""6_Regression_Evaluation

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12GicbblyP_i8CMezRtTalh2YjFEgSPhN

# 01. Import Data & Library
"""

import numpy as np
import pandas as pd
import seaborn as sns

from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import OneHotEncoder, MinMaxScaler

from sklearn.linear_model import LinearRegression
from sklearn.svm import SVR
from sklearn.tree import DecisionTreeRegressor

import matplotlib.pyplot as plt

df = pd.read_csv('Taxi_Fare.csv', parse_dates=['pickup_datetime'])
df.head()

"""# 02. Simple EDA"""

df.info()

df.isna().sum()

df.dropna(inplace=True)

corr = df.corr()

sns.heatmap(corr)

"""# 03. Feature Engineering

## 3.1. Feature Extraction
"""

df['distance'] = (np.abs(df.pickup_longitude - df.pickup_latitude)) + (np.abs(df.dropoff_longitude - df.dropoff_latitude))

pickup_time = df.pickup_datetime.dt

df['year']  = pickup_time.year
df['month'] = pickup_time.month
df['day']   = pickup_time.dayofweek
df['hour']  = pickup_time.hour
df.drop(columns='pickup_datetime',inplace=True)

df.drop(columns=['pickup_longitude','pickup_latitude','dropoff_longitude','dropoff_latitude'],inplace=True)

df.head()

# is there more?

"""# 3.2. Feature Encoding"""

cat_columns = ['month','day','hour']

df = pd.get_dummies(df,columns = cat_columns)

"""# 04. Dataset Splitting"""

X = df.drop(columns="fare_amount")
y = df.fare_amount

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""# 05. Modelling"""

model = LinearRegression()
model.fit(X_train,y_train)

y_train_pred = model.predict(X_train)
print(model.score(X_train,y_train),model.score(X_test,y_test))

residuals = y_train-y_train_pred
plt.scatter(residuals,y_train_pred)
plt.show()

model = SVR()
model.fit(X_train,y_train)

y_train_pred = model.predict(X_train)
print(model.score(X_train,y_train),model.score(X_test,y_test))

C = [1,5, 10]
for c in C:
  model = SVR(C=c)
  model.fit(X_train,y_train)

  print(c,model.score(X_train,y_train),model.score(X_test,y_test))

residuals = y_train-y_train_pred
plt.scatter(residuals,y_train_pred)
plt.show()

model = DecisionTreeRegressor()
model.fit(X_train,y_train)

y_train_pred = model.predict(X_train)
print(model.score(X_train,y_train),model.score(X_test,y_test))

residuals = y_train-y_train_pred
plt.scatter(residuals,y_train_pred)
plt.show()